{
    "name": "text-reveal",
    "type": "registry:ui",
    "dependencies": ["gsap", "@gsap/react"],
    "files": [
        {
            "path": "gsap/text-reveal.tsx",
            "type": "registry:ui",
            "target": "~/components/gsap/text-reveal.tsx",
            "content": "'use client'\n\nimport { useGSAP } from \"@gsap/react\";\nimport gsap from \"gsap\";\nimport { SplitText } from \"gsap/SplitText\";\nimport { ReactNode, useRef } from \"react\";\n\ntype TextRevealProps = {\n    type?: \"chars\" | \"words\" | \"lines\";\n    className?: string;\n    gsapVars?: gsap.TweenVars;\n    children: ReactNode;\n};\n\nconst defaultGsapVars: Record<NonNullable<TextRevealProps[\"type\"]>, gsap.TweenVars> = {\n    chars: {\n        x: 150,\n        opacity: 0,\n        duration: 0.7,\n        ease: \"power3\",\n        stagger: 0.05,\n    },\n    words: {\n        x: 150,\n        opacity: 0,\n        ease: \"power3\",\n        duration: 1,\n        stagger: 0.2,\n        y: -100,\n        rotation: \"random(-80, 80)\",\n    },\n    lines: {\n        duration: 1,\n        yPercent: 100,\n        opacity: 0,\n        stagger: 0.4,\n        ease: \"expo.out\",\n    },\n};\n\nexport const TextReveal = ({ children, type = \"chars\", className, gsapVars = {} }: TextRevealProps) => {\n    const containerRef = useRef<HTMLDivElement | null>(null);\n    const textRef = useRef<HTMLDivElement | null>(null);\n\n    useGSAP(\n        () => {\n            const split = SplitText.create(textRef.current, { type: type });\n            gsap.from(split[type], {\n                ...defaultGsapVars[type],\n                ...gsapVars,\n            });\n        },\n        { scope: containerRef },\n    );\n\n    return (\n        <div ref={containerRef} className={className}>\n            <div ref={textRef}>{children}</div>\n        </div>\n    );\n};\n"
        }
    ]
}
