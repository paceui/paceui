{
    "name": "text-distorter",
    "type": "registry:ui",
    "dependencies": ["gsap", "@gsap/react"],
    "files": [
        {
            "path": "gsap/text-distorter.tsx",
            "type": "registry:ui",
            "target": "~/components/gsap/text-distorter.tsx",
            "content": "\"use client\";\n\nimport { ReactNode, useRef } from \"react\";\n\nimport { useGSAP } from \"@gsap/react\";\nimport gsap from \"gsap\";\nimport { ScrambleTextPlugin } from \"gsap/ScrambleTextPlugin\";\nimport { SplitText } from \"gsap/SplitText\";\n\ngsap.registerPlugin(ScrambleTextPlugin);\n\ntype TextDistorterProps = {\n    scrambleChars?: string;\n    className?: string;\n    children: ReactNode;\n};\n\nexport const TextDistorter = ({ children, scrambleChars = \".:\", className }: TextDistorterProps) => {\n    const wrapperRef = useRef<HTMLDivElement | null>(null);\n\n    useGSAP(\n        () => {\n            const element = wrapperRef.current!;\n\n            const splitText = SplitText.create(element, { type: \"chars\", charsClass: \"char\" });\n\n            splitText.chars.forEach((char) => {\n                gsap.set(char, { attr: { \"data-content\": char.innerHTML } });\n            });\n\n            element.onpointermove = (e) => {\n                splitText.chars.forEach((char) => {\n                    const rect = char.getBoundingClientRect();\n                    const cx = rect.left + rect.width / 2;\n                    const cy = rect.top + rect.height / 2;\n                    const dx = e.clientX - cx;\n                    const dy = e.clientY - cy;\n                    const dist = Math.sqrt(dx * dx + dy * dy);\n                    if (dist < 100) {\n                        gsap.to(char, {\n                            overwrite: true,\n                            duration: 2 - dist / 100,\n                            scrambleText: {\n                                // @ts-ignore\n                                text: char.dataset.content,\n                                chars: scrambleChars,\n                                speed: 0.5,\n                            },\n                            ease: \"bounce\",\n                        });\n                    }\n                });\n            };\n        },\n        { scope: wrapperRef },\n    );\n\n    return (\n        <div ref={wrapperRef} className={className}>\n            {children}\n        </div>\n    );\n};\n"
        }
    ]
}
