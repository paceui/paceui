{
    "name": "reveal-text",
    "type": "registry:ui",
    "dependencies": ["gsap", "@gsap/react"],
    "files": [
        {
            "path": "gsap/reveal-text.tsx",
            "type": "registry:ui",
            "target": "~/components/gsap/reveal-text.tsx",
            "content": "\"use client\";\n\nimport { ReactNode, useRef } from \"react\";\n\nimport { useGSAP } from \"@gsap/react\";\nimport gsap from \"gsap\";\nimport { SplitText } from \"gsap/SplitText\";\n\ntype SplitType = \"chars\" | \"words\" | \"lines\";\n\ntype RevealTextProps = {\n    type?: SplitType;\n    className?: string;\n    gsapVars?: gsap.TweenVars;\n    splitTextVars?: Partial<SplitText.Vars>;\n    children: ReactNode;\n};\n\nconst defaultGsapVars: Record<SplitType, gsap.TweenVars> = {\n    chars: {\n        x: 150,\n        opacity: 0,\n        duration: 0.7,\n        ease: \"power3\",\n        stagger: 0.05,\n    },\n    words: {\n        x: 150,\n        opacity: 0,\n        ease: \"power3\",\n        duration: 1,\n        stagger: 0.2,\n        y: -100,\n        rotation: \"random(-80, 80)\",\n    },\n    lines: {\n        duration: 1,\n        yPercent: 100,\n        opacity: 0,\n        stagger: 0.4,\n        ease: \"expo.out\",\n    },\n};\n\nexport const RevealText = ({\n    children,\n    type = \"chars\",\n    className,\n    gsapVars = {},\n    splitTextVars = {},\n}: RevealTextProps) => {\n    const wrapperRef = useRef<HTMLDivElement | null>(null);\n\n    useGSAP(\n        () => {\n            const element = wrapperRef.current;\n            if (!element) return;\n\n            const splitText = SplitText.create(element, { type, ...splitTextVars });\n            gsap.from(splitText[type], {\n                ...defaultGsapVars[type],\n                ...gsapVars,\n            });\n        },\n        { scope: wrapperRef },\n    );\n\n    return (\n        <div ref={wrapperRef} className={className}>\n            {children}\n        </div>\n    );\n};\n"
        }
    ]
}
